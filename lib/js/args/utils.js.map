{"version":3,"sources":["../../../src/js/args/utils.js"],"names":["handleType","value","type","constructor","String","Array","Number","parseInt","readOption","option","defaultValue","contents","usage","name","fromArgs","raw","count","propVal","isArray","_","push","condition","init","toString","length","getOptions","definedSubcommand","options","args","details","Object","assign","hasOwnProperty","call","related","isDefined","availableOptions","forEach","opt","suggestOption","stringSimilarity","findBestMatch","console","log","bestMatch","rating","suggestion","filter","item","flag","target","generateDetails","trim","showHelp","generateExamples","examples","parts","printSubColor","description","printMainColor","kind","items","isCmd","sort","a","b","first","second","initial","join","isVersion","indexOf","longest","slice","difference","repeat","JSON","stringify","runCommand","config","help","sub","concat","shift","bind","list","children","child"],"mappings":"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","file":"utils.js","sourcesContent":["import camelcase from 'lodash.camelcase';\r\nimport stringSimilarity from 'string-similarity';\r\n\r\nexport default {\r\n  handleType(value) {\r\n    let type = value;\r\n    if (typeof value !== 'function') {\r\n      type = value.constructor;\r\n    }\r\n\r\n    // Depending on the type of the default value,\r\n    // select a default initializer function\r\n    switch (type) {\r\n      case String:\r\n        return ['[value]'];\r\n      case Array:\r\n        return ['<list>'];\r\n      case Number:\r\n      case parseInt:\r\n        return ['<n>', parseInt];\r\n      default:\r\n        return [''];\r\n    }\r\n  },\r\n\r\n  readOption(option) {\r\n    let value = option.defaultValue;\r\n    const contents = {};\r\n\r\n    // If option has been used, get its value\r\n    for (const name of option.usage) {\r\n      const fromArgs = this.raw[name];\r\n      if (typeof fromArgs !== 'undefined') {\r\n        value = fromArgs;\r\n      }\r\n    }\r\n\r\n    let count = -1;\r\n    // Process the option's value\r\n    for (let name of option.usage) {\r\n      count += 1;\r\n      let propVal = value;\r\n\r\n      // Convert the value to an array when the option is called just once\r\n      if (\r\n        Array.isArray(option.defaultValue) &&\r\n        typeof propVal !== typeof option.defaultValue\r\n      ) {\r\n        if (count === 0) {\r\n          this.raw._.push(propVal);\r\n        }\r\n        propVal = [propVal];\r\n      }\r\n\r\n      if (\r\n        typeof option.defaultValue !== 'undefined' &&\r\n        typeof propVal !== typeof option.defaultValue\r\n      ) {\r\n        if (count === 0) {\r\n          this.raw._.push(propVal);\r\n        }\r\n        propVal = option.defaultValue;\r\n      }\r\n\r\n      let condition = true;\r\n\r\n      if (option.init) {\r\n        // Only use the toString initializer if value is a number\r\n        if (option.init === toString) {\r\n          condition = propVal.constructor === Number;\r\n        }\r\n\r\n        if (condition) {\r\n          // Pass it through the initializer\r\n          propVal = option.init(propVal);\r\n        }\r\n      }\r\n\r\n      // Camelcase option name (skip short flag)\r\n      if (name.length > 1) {\r\n        name = camelcase(name);\r\n      }\r\n\r\n      // Add option to list\r\n      contents[name] = propVal;\r\n    }\r\n\r\n    return contents;\r\n  },\r\n\r\n  getOptions(definedSubcommand) {\r\n    const options = {};\r\n    const args = {};\r\n\r\n    // Set option defaults\r\n    for (const option of this.details.options) {\r\n      if (typeof option.defaultValue === 'undefined') {\r\n        continue; // eslint-disable-line\r\n      }\r\n\r\n      Object.assign(options, this.readOption(option));\r\n    }\r\n\r\n    // Copy over the arguments\r\n    Object.assign(args, this.raw);\r\n    const _ = [...args._];\r\n    delete args._;\r\n\r\n    // Override defaults if used in command line\r\n    for (const option in args) {\r\n      if (!{}.hasOwnProperty.call(args, option)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n      const related = this.isDefined(option, 'options');\r\n\r\n      if (related) {\r\n        const details = this.readOption(related);\r\n        Object.assign(options, details);\r\n      }\r\n\r\n      if (!related && !definedSubcommand) {\r\n        // Unknown Option\r\n        const availableOptions = [];\r\n        this.details.options.forEach((opt) => {\r\n          availableOptions.push(...opt.usage);\r\n        });\r\n\r\n        const suggestOption = stringSimilarity.findBestMatch(\r\n          option,\r\n          availableOptions,\r\n        );\r\n\r\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\r\n\r\n        if (suggestOption.bestMatch.rating >= 0.5) {\r\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\r\n\r\n          const suggestion = this.details.options.filter((item) => {\r\n            for (const flag of item.usage) {\r\n              if (flag === suggestOption.bestMatch.target) {\r\n                return true;\r\n              }\r\n            }\r\n\r\n            return false;\r\n          });\r\n\r\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\r\n        } else {\r\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\r\n          this.showHelp();\r\n        }\r\n      }\r\n    }\r\n\r\n    options._ = _;\r\n    return options;\r\n  },\r\n\r\n  generateExamples() {\r\n    const { examples } = this.details;\r\n    const parts = [];\r\n\r\n    for (const item in examples) {\r\n      if (!{}.hasOwnProperty.call(examples, item)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\r\n      const description = this.printMainColor(`- ${examples[item].description}`);\r\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\r\n    }\r\n\r\n    return parts;\r\n  },\r\n\r\n  generateDetails(kind) {\r\n    // Get all properties of kind from global scope\r\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\r\n    const parts = [];\r\n    const isCmd = kind === 'commands';\r\n\r\n    // Sort items alphabetically\r\n    items.sort((a, b) => {\r\n      const first = isCmd ? a.usage : a.usage[1];\r\n      const second = isCmd ? b.usage : b.usage[1];\r\n\r\n      switch (true) {\r\n        case first < second:\r\n          return -1;\r\n        case first > second:\r\n          return 1;\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n\r\n    for (const item in items) {\r\n      if (!{}.hasOwnProperty.call(items, item)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n\r\n      let { usage } = items[item];\r\n      let initial = items[item].defaultValue;\r\n\r\n      // If usage is an array, show its contents\r\n      if (usage.constructor === Array) {\r\n        if (isCmd) {\r\n          usage = usage.join(', ');\r\n        } else {\r\n          const isVersion = usage.indexOf('v');\r\n          usage = `-${usage[0]}, --${usage[1]}`;\r\n\r\n          if (!initial) {\r\n            initial = items[item].init;\r\n          }\r\n\r\n          usage += initial && isVersion === -1\r\n            ? ` ${this.handleType(initial)[0]}`\r\n            : '';\r\n        }\r\n      }\r\n\r\n      // Overwrite usage with readable syntax\r\n      items[item].usage = usage;\r\n    }\r\n\r\n    // Find length of longest option or command\r\n    // Before doing that, make a copy of the original array\r\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\r\n\r\n    for (const item of items) {\r\n      let { usage, description } = item;\r\n      const { defaultValue } = item;\r\n      const difference = longest - usage.length;\r\n\r\n      // Compensate the difference to longest property with spaces\r\n      usage += ' '.repeat(difference);\r\n\r\n      // Add some space around it as well\r\n      if (typeof defaultValue !== 'undefined') {\r\n        if (typeof defaultValue === 'boolean') {\r\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\r\n        } else {\r\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\r\n        }\r\n      }\r\n      parts.push(`  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\r\n    }\r\n\r\n    return parts;\r\n  },\r\n\r\n  runCommand(details, options) {\r\n    // If help is disabled, remove initializer\r\n    if (details.usage === 'help' && !this.config.help) {\r\n      details.init = false; // eslint-disable-line\r\n    }\r\n\r\n    // If command has initializer, call it\r\n    if (details.init) {\r\n      const sub = [].concat(this.sub);\r\n      sub.shift();\r\n\r\n      return details.init.bind(this)(details.usage, sub, options);\r\n    }\r\n\r\n    return '';\r\n  },\r\n\r\n  isDefined(name, list) {\r\n    // Get all items of kind\r\n    const children = this.details[list];\r\n\r\n    // Check if a child matches the requested name\r\n    for (const child of children) {\r\n      const { usage } = child;\r\n      const type = usage.constructor;\r\n\r\n      if (type === Array && usage.indexOf(name) > -1) {\r\n        return child;\r\n      }\r\n\r\n      if (type === String && usage === name) {\r\n        return child;\r\n      }\r\n    }\r\n\r\n    // If nothing matches, item is not defined\r\n    return false;\r\n  },\r\n};\r\n"]}