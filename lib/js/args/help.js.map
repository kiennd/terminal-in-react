{"version":3,"sources":["../../../src/js/args/help.js"],"names":["name","config","firstBig","word","charAt","toUpperCase","substr","parts","groups","options","examples","group","details","length","optionHandle","value","push","printMainColor","printSubColor","generateExamples","generateDetails","output","part","join","usageFilter","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;oBAAe,YAAY;AAAA,QACjBA,IADiB,GACR,KAAKC,MADG,CACjBD,IADiB;;AAEzB,QAAME,WAAW,SAAXA,QAAW;AAAA,aAAQC,KAAKC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,KAAKG,MAAL,CAAY,CAAZ,CAAvC;AAAA,KAAjB;;AAEA,QAAMC,QAAQ,EAAd;;AAEA,QAAMC,SAAS;AACbC,eAAS,IADI;AAEbC,gBAAU;AAFG,KAAf;;AAKA,SAAK,IAAMC,KAAX,IAAoBH,MAApB,EAA4B;AAC1B,UAAI,KAAKI,OAAL,CAAaD,KAAb,EAAoBE,MAApB,GAA6B,CAAjC,EAAoC;AAClC,iBADkC,CACxB;AACX;;AAEDL,aAAOG,KAAP,IAAgB,KAAhB;AACD;;AAED,QAAMG,eAAeN,OAAOC,OAAP,GAAiB,YAAjB,GAAgC,EAArD;AACA,QAAMM,QAAQ,OAAO,KAAKd,MAAL,CAAYc,KAAnB,KAA6B,QAA7B,SACN,KAAKd,MAAL,CAAYc,KADN,GAEV,EAFJ;;AAIAR,UAAMS,IAAN,CAAW,CACT,EADS,cAEC,KAAKC,cAAL,CAAoBjB,IAApB,CAFD,SAE8B,KAAKkB,aAAL,CAAmBJ,eAAeC,KAAlC,CAF9B,EAGT,EAHS,CAAX;;AAMA,SAAK,IAAMJ,MAAX,IAAoBH,MAApB,EAA4B;AAC1B,UAAI,CAACA,OAAOG,MAAP,CAAL,EAAoB;AAClB,iBADkB,CACR;AACX;;AAEDJ,YAAMS,IAAN,CAAW,CAAC,EAAD,EAAQd,SAASS,MAAT,CAAR,QAA4B,EAA5B,EAAgC,EAAhC,CAAX;;AAEA,UAAIA,WAAU,UAAd,EAA0B;AACxBJ,cAAMS,IAAN,CAAW,KAAKG,gBAAL,EAAX;AACD,OAFD,MAEO;AACLZ,cAAMS,IAAN,CAAW,KAAKI,eAAL,CAAqBT,MAArB,CAAX;AACD;;AAEDJ,YAAMS,IAAN,CAAW,CAAC,EAAD,EAAK,EAAL,CAAX;AACD;;AAED,QAAIK,SAAS,EAAb;;AAEA;AAhDyB;AAAA;AAAA;;AAAA;AAiDzB,2BAAmBd,KAAnB,8HAA0B;AAAA,YAAfe,IAAe;;AACxBD,kBAAUC,KAAKC,IAAL,CAAU,MAAV,CAAV;AACD;AAnDwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqDzB,QAAI,CAACf,OAAOC,OAAZ,EAAqB;AACnBY,eAAS,sBAAT;AACD;;AAvDwB,QAyDjBG,WAzDiB,GAyDD,KAAKvB,MAzDJ,CAyDjBuB,WAzDiB;;AA2DzB;;AACA,QAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;AACrCH,eAASG,YAAYH,MAAZ,KAAuBA,MAAhC;AACD;;AAEDI,YAAQC,GAAR,CAAYL,MAAZ,EAhEyB,CAgEJ;AACtB,G","file":"help.js","sourcesContent":["export default function () {\r\n  const { name } = this.config;\r\n  const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\r\n\r\n  const parts = [];\r\n\r\n  const groups = {\r\n    options: true,\r\n    examples: true,\r\n  };\r\n\r\n  for (const group in groups) {\r\n    if (this.details[group].length > 0) {\r\n      continue; // eslint-disable-line\r\n    }\r\n\r\n    groups[group] = false;\r\n  }\r\n\r\n  const optionHandle = groups.options ? '[options] ' : '';\r\n  const value = typeof this.config.value === 'string'\r\n    ? ` ${this.config.value}`\r\n    : '';\r\n\r\n  parts.push([\r\n    '',\r\n    `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + value)}`,\r\n    '',\r\n  ]);\r\n\r\n  for (const group in groups) {\r\n    if (!groups[group]) {\r\n      continue; // eslint-disable-line\r\n    }\r\n\r\n    parts.push(['', `${firstBig(group)}:`, '', '']);\r\n\r\n    if (group === 'examples') {\r\n      parts.push(this.generateExamples());\r\n    } else {\r\n      parts.push(this.generateDetails(group));\r\n    }\r\n\r\n    parts.push(['', '']);\r\n  }\r\n\r\n  let output = '';\r\n\r\n  // And finally, merge and output them\r\n  for (const part of parts) {\r\n    output += part.join('\\n  ');\r\n  }\r\n\r\n  if (!groups.options) {\r\n    output = 'No options available';\r\n  }\r\n\r\n  const { usageFilter } = this.config;\r\n\r\n  // If filter is available, pass usage information through\r\n  if (typeof usageFilter === 'function') {\r\n    output = usageFilter(output) || output;\r\n  }\r\n\r\n  console.log(output); // eslint-disable-line\r\n}\r\n"]}