{"version":3,"sources":["../../../src/js/args/option.js"],"names":["name","description","defaultValue","init","usage","assignShort","n","options","short","find","flagName","charAt","toUpperCase","constructor","String","details","Array","concat","Error","length","optionDetails","filter","item","defaultIsWrong","undefined","initFunction","handleType","push"],"mappings":";;;;;;;;;;;;;;;;;;;oBAAe,UAAUA,IAAV,EAAgBC,WAAhB,EAA6BC,YAA7B,EAA2CC,IAA3C,EAAiD;AAC9D,QAAIC,QAAQ,EAAZ;;AAEA,QAAMC,cAAc,SAAdA,WAAc,CAACC,CAAD,EAAIC,OAAJ,EAAaC,KAAb,EAAuB;AACzC,UAAID,QAAQE,IAAR,CAAa;AAAA,eAAYC,SAASN,KAAT,CAAe,CAAf,MAAsBI,KAAlC;AAAA,OAAb,CAAJ,EAA2D;AACzDA,gBAAQF,EAAEK,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAAR,CADyD,CACtB;AACpC;AACD,aAAO,CAACJ,KAAD,EAAQF,CAAR,CAAP;AACD,KALD;;AAOA;AACA;AACA,YAAQN,KAAKa,WAAb;AACE,WAAKC,MAAL;AACEV,gBAAQC,YAAYL,IAAZ,EAAkB,KAAKe,OAAL,CAAaR,OAA/B,EAAwCP,KAAKW,MAAL,CAAY,CAAZ,CAAxC,CAAR;AACA;AACF,WAAKK,KAAL;AACEZ,gBAAQA,MAAMa,MAAN,CAAajB,IAAb,CAAR;AACA;AACF;AACE,cAAM,IAAIkB,KAAJ,CAAU,yBAAV,CAAN;AARJ;;AAWA;AACA,QAAId,MAAMe,MAAN,GAAe,CAAf,IAAoBf,MAAM,CAAN,EAASe,MAAT,GAAkB,CAA1C,EAA6C;AAC3C,YAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,QAAME,gBAAgB;AACpBlB,gCADoB;AAEpBE,kBAFoB;AAGpBH;AAHoB,KAAtB;;AAMA,QAAI,KAAKc,OAAL,CAAaR,OAAb,CAAqBc,MAArB,CAA4B;AAAA,aAAQC,KAAKlB,KAAL,CAAW,CAAX,MAAkBA,MAAM,CAAN,CAA1B;AAAA,KAA5B,EAAgEe,MAAhE,KAA2E,CAA/E,EAAkF;AAChF,UAAII,uBAAJ;;AAEA,cAAQrB,YAAR;AACE,aAAK,KAAL;AACEqB,2BAAiB,IAAjB;AACA;AACF,aAAK,IAAL;AACEA,2BAAiB,IAAjB;AACA;AACF,aAAKC,SAAL;AACED,2BAAiB,IAAjB;AACA;AACF;AACEA,2BAAiB,KAAjB;AAXJ;;AAcA;AACA,UAAI,CAACA,cAAL,EAAqB;AACnB,YAAME,eAAe,OAAOtB,IAAP,KAAgB,UAArC;AACAiB,sBAAcjB,IAAd,GAAqBsB,eAAetB,IAAf,GAAsB,KAAKuB,UAAL,CAAgBxB,YAAhB,EAA8B,CAA9B,CAA3C;AACD;;AAED;AACA,WAAKa,OAAL,CAAaR,OAAb,CAAqBoB,IAArB,CAA0BP,aAA1B;AACD;;AAED;AACA,WAAO,IAAP;AACD,G","file":"option.js","sourcesContent":["export default function (name, description, defaultValue, init) {\r\n  let usage = [];\r\n\r\n  const assignShort = (n, options, short) => {\r\n    if (options.find(flagName => flagName.usage[0] === short)) {\r\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\r\n    }\r\n    return [short, n];\r\n  };\r\n\r\n  // If name is an array, pick the values\r\n  // Otherwise just use the whole thing\r\n  switch (name.constructor) {\r\n    case String:\r\n      usage = assignShort(name, this.details.options, name.charAt(0));\r\n      break;\r\n    case Array:\r\n      usage = usage.concat(name);\r\n      break;\r\n    default:\r\n      throw new Error('Invalid name for option');\r\n  }\r\n\r\n  // Throw error if short option is too long\r\n  if (usage.length > 0 && usage[0].length > 1) {\r\n    throw new Error('Short version of option is longer than 1 char');\r\n  }\r\n\r\n  const optionDetails = {\r\n    defaultValue,\r\n    usage,\r\n    description,\r\n  };\r\n\r\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\r\n    let defaultIsWrong;\r\n\r\n    switch (defaultValue) {\r\n      case false:\r\n        defaultIsWrong = true;\r\n        break;\r\n      case null:\r\n        defaultIsWrong = true;\r\n        break;\r\n      case undefined:\r\n        defaultIsWrong = true;\r\n        break;\r\n      default:\r\n        defaultIsWrong = false;\r\n    }\r\n\r\n    // Set initializer depending on type of default value\r\n    if (!defaultIsWrong) {\r\n      const initFunction = typeof init === 'function';\r\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\r\n    }\r\n\r\n    // Register option to global scope\r\n    this.details.options.push(optionDetails);\r\n  }\r\n\r\n  // Allow chaining of .option()\r\n  return this;\r\n}\r\n"]}