{"version":3,"sources":["../../src/js/utils.js"],"names":["handleLogging","isServer","getOs","setOldLogger","console","method","addToOutput","args","oldLog","e","Error","res","slice","map","arg","i","Object","defineProperty","value","writable","window","document","linuxPlatforms","darwinPlatforms","os","platform","family","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;UAYgBA,a,GAAAA,a;UAuBAC,Q,GAAAA,Q;UAOAC,K,GAAAA,K;;;;;;;;;;;;;;;;;;;;AArChB;AACC,YAASC,YAAT,GAAwB;AACvBC,YAAQ,QAAR,IAAoBA,QAAQ,KAAR,CAApB,CADuB,CACa;AACrC,GAFA,GAAD;;AAIA;AACA;AACO,WAASJ,aAAT,CAAuBK,MAAvB,EAA+BC,WAA/B,EAA4C;AACjD;AACAF,YAAQC,MAAR,IAAkB,YAAa;AAAA,wCAATE,IAAS;AAATA,YAAS;AAAA;;AAC7B,UAAI;AAAA;;AACF,6BAAQC,MAAR,wBAAmBH,MAAnB,eAAiCE,IAAjC;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;AACD,UAAMC,MAAM,UAAIJ,IAAJ,EAAUK,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,UAACC,GAAD,EAAMC,CAAN,EAAY;AACjD,uBAAeD,GAAf,yCAAeA,GAAf;AACE,eAAK,QAAL;AACE,mBAAO,8BAAC,8BAAD,IAAiB,MAAMA,GAAvB,EAA4B,iBAAeC,CAA3C,GAAP;AACF,eAAK,UAAL;AACE,wBAAUD,GAAV;AACF;AACE,mBAAOA,GAAP;AANJ;AAQD,OATW,CAAZ;AAUAR,kBAAYK,GAAZ;AACD,KAjBD;AAkBAK,WAAOC,cAAP,CAAsBb,QAAQC,MAAR,CAAtB,EAAuC,MAAvC,EAA+C,EAAEa,OAAOb,MAAT,EAAiBc,UAAU,KAA3B,EAA/C,EApBiD,CAoBmC;AACrF;;AAEM,WAASlB,QAAT,GAAoB;AACzB,WAAO,EAAE,OAAOmB,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,QAA1C,CAAP;AACD;;AAED,MAAMC,iBAAiB,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,SAA/B,EAA0C,MAA1C,EAAkD,SAAlD,CAAvB;AACA,MAAMC,kBAAkB,CAAC,MAAD,EAAS,KAAT,CAAxB;;AAEO,WAASrB,KAAT,GAAiB;AAAA,QACdsB,EADc,GACPC,kBADO,CACdD,EADc;;AAEtB,QAAIA,GAAGE,MAAH,KAAc,IAAd,IAAsBF,GAAGE,MAAH,CAAUC,OAAV,CAAkB,SAAlB,MAAiC,CAA3D,EAA8D;AAC5D,aAAO,KAAP;AACD;AACD,QAAIH,GAAGE,MAAH,KAAc,IAAd,IAAsBJ,eAAeK,OAAf,CAAuBH,GAAGE,MAA1B,IAAoC,CAAC,CAA/D,EAAkE;AAChE,aAAO,OAAP;AACD;AACD,QAAIF,GAAGE,MAAH,KAAc,IAAd,IAAsBH,gBAAgBI,OAAhB,CAAwBH,GAAGE,MAA3B,IAAqC,CAAC,CAAhE,EAAmE;AACjE,aAAO,QAAP;AACD;AACD,WAAO,SAAP;AACD","file":"utils.js","sourcesContent":["/* eslint-disable no-console */\r\nimport React from 'react'; // eslint-disable-line\r\nimport ObjectInspector from 'react-object-inspector';\r\nimport platform from 'platform';\r\n\r\n// Capture the console.log calls (hijacking)\r\n(function setOldLogger() {\r\n  console['oldLog'] = console['log']; // eslint-disable-line dot-notation\r\n}());\r\n\r\n// Handle console logging\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport function handleLogging(method, addToOutput) {\r\n  // eslint-disable-next-line no-console\r\n  console[method] = (...args) => {\r\n    try {\r\n      console.oldLog(`[${method}]`, ...args);\r\n    } catch (e) {\r\n      throw new Error('Terminal was loaded more than once check script tags');\r\n    }\r\n    const res = [...args].slice(0, 15).map((arg, i) => {\r\n      switch (typeof arg) {\r\n        case 'object':\r\n          return <ObjectInspector data={arg} key={`object-${i}`} />;\r\n        case 'function':\r\n          return `${arg}`;\r\n        default:\r\n          return arg;\r\n      }\r\n    });\r\n    addToOutput(res);\r\n  };\r\n  Object.defineProperty(console[method], 'name', { value: method, writable: false }); // eslint-disable-line no-console\r\n}\r\n\r\nexport function isServer() {\r\n  return !(typeof window !== 'undefined' && window.document);\r\n}\r\n\r\nconst linuxPlatforms = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'];\r\nconst darwinPlatforms = ['OS X', 'iOS'];\r\n\r\nexport function getOs() {\r\n  const { os } = platform;\r\n  if (os.family !== null && os.family.indexOf('Windows') === 0) {\r\n    return 'win';\r\n  }\r\n  if (os.family !== null && linuxPlatforms.indexOf(os.family) > -1) {\r\n    return 'linux';\r\n  }\r\n  if (os.family !== null && darwinPlatforms.indexOf(os.family) > -1) {\r\n    return 'darwin';\r\n  }\r\n  return 'unknown';\r\n}\r\n"]}